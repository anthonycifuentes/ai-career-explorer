/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appSidebarRouteRouteImport } from './routes/(app)/_sidebar/route'
import { Route as appSidebarAssistandRouteImport } from './routes/(app)/_sidebar/assistand'

const appRouteImport = createFileRoute('/(app)')()

const appRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appSidebarRouteRoute = appSidebarRouteRouteImport.update({
  id: '/_sidebar',
  getParentRoute: () => appRoute,
} as any)
const appSidebarAssistandRoute = appSidebarAssistandRouteImport.update({
  id: '/assistand',
  path: '/assistand',
  getParentRoute: () => appSidebarRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appSidebarRouteRouteWithChildren
  '/assistand': typeof appSidebarAssistandRoute
}
export interface FileRoutesByTo {
  '/': typeof appSidebarRouteRouteWithChildren
  '/assistand': typeof appSidebarAssistandRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_sidebar': typeof appSidebarRouteRouteWithChildren
  '/(app)/_sidebar/assistand': typeof appSidebarAssistandRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/assistand'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/assistand'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_sidebar'
    | '/(app)/_sidebar/assistand'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/_sidebar': {
      id: '/(app)/_sidebar'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appSidebarRouteRouteImport
      parentRoute: typeof appRoute
    }
    '/(app)/_sidebar/assistand': {
      id: '/(app)/_sidebar/assistand'
      path: '/assistand'
      fullPath: '/assistand'
      preLoaderRoute: typeof appSidebarAssistandRouteImport
      parentRoute: typeof appSidebarRouteRoute
    }
  }
}

interface appSidebarRouteRouteChildren {
  appSidebarAssistandRoute: typeof appSidebarAssistandRoute
}

const appSidebarRouteRouteChildren: appSidebarRouteRouteChildren = {
  appSidebarAssistandRoute: appSidebarAssistandRoute,
}

const appSidebarRouteRouteWithChildren = appSidebarRouteRoute._addFileChildren(
  appSidebarRouteRouteChildren,
)

interface appRouteChildren {
  appSidebarRouteRoute: typeof appSidebarRouteRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appSidebarRouteRoute: appSidebarRouteRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
